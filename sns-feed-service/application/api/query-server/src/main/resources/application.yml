server:
  port: 9001
  tomcat:
    threads:
      min-spare: 20

spring:
  profiles:
    active: dev

  jpa:
    properties:
      hibernate:
        hbm2ddl:
          auto: none
        default_batch_fetch_size: 1000
    open-in-view: false

resilience4j:
  circuitbreaker:
    configs:
      default:
        # 최소요청 횟수 3회 이후, 통계 건수 최근 10건을 평가했을때,
        # 실패율 60% 이상이 되면, Circuit Breaker가 Open되고, Circuit Breaker 지속시간은 10초동안 유지된다.
        slidingWindowType: COUNT_BASED # 통계 건수로 측정 (TIME_BASED -> 시간 통계로 측정)
        slidingWindowSize: 10 # 가장 최근의 통계 건수
        minimumNumberOfCalls: 3 # 최소 요청 횟수
        failureRateThreshold: 60 # 실패율
        waitDurationInOpenState: 10000 # Circuit Breaker 지속 시간 (지속 시간동안 Backend Service를 호출하지 않는다.)

---
spring:
  config:
    activate:
      on-profile: dev

  datasource:
    hikari:
      driver-class-name: org.h2.Driver
      jdbc-url: jdbc:h2:mem:issue-service
      username: sa

  data:
    redis:
      post:
        mode: standalone
        nodes:
          node1: localhost:6383
      feed:
        mode: standalone
        nodes:
          node1: localhost:6384

logging:
  level:
    org.hibernate.SQL: debug
    org.springframework.orm.jpa: debug
    io.lettuce.core: debug

---
spring:
  config:
    activate:
      on-profile: prod

  datasource:
    hikari:
      write:
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://masteruser:masterpassword@localhost:9770/large-scale-system?useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Seoul
        minimum-idle: 10
        maximum-pool-size: 10
        max-lifetime: 18000000 # 5 hour
        connection-timeout: 5000 # 5 second
      read:
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://slaveuser:slavepassword@localhost:9771/large-scale-system?useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Seoul
        minimum-idle: 20
        maximum-pool-size: 20
        max-lifetime: 18000000 # 5 hour
        connection-timeout: 5000 # 5 second

  data:
    redis:
      post:
        mode: standalone
        nodes:
          node1: localhost:6383
      feed:
        mode: standalone
        nodes:
          node1: localhost:6384
