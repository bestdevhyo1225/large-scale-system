server:
  port: 9000
  tomcat:
    threads:
      min-spare: 20

spring:
  profiles:
    active: dev

# Data 모듈 사용 여부 설정
data:
  enable:
    datasource: true
    jpa: true
    redis:
      post: true

  jpa:
    properties:
      hibernate:
        hbm2ddl:
          auto: update
        default_batch_fetch_size: 1000
    open-in-view: false

# Infrastructure 모듈 사용 여부 설정
infrastructure:
  enable:
    kafka: true

#resilience4j:
#  circuitbreaker:
#    configs:
#      default:
#        # 최소요청 횟수 3회 이후, 통계 건수 최근 10건을 평가했을때,
#        # 실패율 60% 이상이 되면, Circuit Breaker가 Open되고, Circuit Breaker 지속시간은 10초동안 유지된다.
#        slidingWindowType: COUNT_BASED # 통계 건수로 측정 (TIME_BASED -> 시간 통계로 측정)
#        slidingWindowSize: 10 # 가장 최근의 통계 건수
#        minimumNumberOfCalls: 3 # 최소 요청 횟수
#        failureRateThreshold: 60 # 실패율
#        waitDurationInOpenState: 10000 # Circuit Breaker 지속 시간 (지속 시간동안 Backend Service를 호출하지 않는다.)

---
spring:
  config:
    activate:
      on-profile: dev

data:
  datasource:
    hikari:
      driver-class-name: org.h2.Driver
      jdbc-url: jdbc:h2:mem:issue-service
      username: sa

  redis:
    post:
      mode: standalone
      nodes: localhost:6383

infrastructure:
  kafka:
    producer:
      bootstrap-servers: localhost:19092,localhost:19093,localhost:19094
      acks: 1
      buffer-memory: 33554432 # 33MB (default)
      compression-type: lz4
      retries: 0
      batch-size: 100000 # 100KB
      linger-ms: 50
      request-timeout-ms: 60000 # 60초
      delivery-timeout-ms: 120000 # 120초

logging:
  level:
    org.hibernate.SQL: debug
    org.springframework.orm.jpa: debug

---
spring:
  config:
    activate:
      on-profile: prod

# Data 모듈 사용 여부 설정
data:
  datasource:
    hikari:
      write:
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://masteruser:masterpassword@localhost:9770/large-scale-system?useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Seoul
        minimum-idle: 20
        maximum-pool-size: 20
        max-lifetime: 18000000 # 5 hour
        connection-timeout: 5000 # 5 second
      read:
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://slaveuser:slavepassword@localhost:9771/large-scale-system?useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Seoul
        minimum-idle: 30
        maximum-pool-size: 30
        max-lifetime: 18000000 # 5 hour
        connection-timeout: 5000 # 5 second

  redis:
    post:
      mode: standalone
      nodes: localhost:6383

# Infrastructure 모듈 사용 여부 설정
infrastructure:
  kafka:
    producer:
      bootstrap-servers: localhost:19092,localhost:19093,localhost:19094
      acks: 1
      buffer-memory: 33554432 # 33MB (default)
      compression-type: lz4
      retries: 0
      batch-size: 1000 # 1KB, 해당 사이즈에 도달하게 되면, 메시지들을 전송한다.
      linger-ms: 100 # batch-size 값에 도달하지 못한 상황에서 linger.ms 제한 시간에 도달 했을때, 메시지들을 전송한다.
      request-timeout-ms: 60000 # 60초
      delivery-timeout-ms: 180000 # 180초
