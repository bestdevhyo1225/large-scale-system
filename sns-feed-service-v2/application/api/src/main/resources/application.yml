server:
  port: 9000
  tomcat:
    threads:
      min-spare: 20
      max: 150

spring:
  profiles:
    active: develop

  post:
    redis:
      enable: true

  wish:
    redis:
      enable: true

resilience4j:
  ratelimiter:
    #    configs:
    #      default:
    #       registerHealthIndicator: false # actuator를 통해 ratelimiter 상태를 체크하기 위한 여부
    #       allowHealthIndicatorToFail: false
    #       subscribeForEvents: true
    #       eventConsumerBufferSize: 50
    instances:
      createFollowMemberUsecase:
        limitForPeriod: 500 # limitRefreshPeriod 기간 동안 허용되는 요청 수
        limitRefreshPeriod: 1s # limitRefresh 기간 (초)
        timeoutDuration: 3s # 권한 acquire(허가)를 위해 스레드가 대기하는 시간 (초)
      createPostUsecase:
        limitForPeriod: 500
        limitRefreshPeriod: 1s
        timeoutDuration: 3s
      createWishUsecase:
        limitForPeriod: 1000
        limitRefreshPeriod: 1s
        timeoutDuration: 3s
      updateMemberInfluencerUsecase:
        limitForPeriod: 1000
        limitRefreshPeriod: 1s
        timeoutDuration: 3s

management:
  endpoint:
    health:
      show-details: always # 상세하게 보고 싶을때
  #      show-components: always # UP, DOWN 상태만 보고 싶을때
  endpoints:
    web:
      exposure:
        include: "*"

---
spring:
  config:
    activate:
      on-profile: develop

---
spring:
  config:
    activate:
      on-profile: production
