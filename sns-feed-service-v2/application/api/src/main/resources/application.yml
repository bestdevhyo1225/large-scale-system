server:
  port: 9000
  tomcat:
    threads:
      min-spare: 20
      max: 150

spring:
  profiles:
    active: develop

  post:
    redis:
      enable: true

  wish:
    redis:
      enable: true

resilience4j:
  ratelimiter:
    usecase:
      create-follow-member:
        limitForPeriod: 100 # limitRefreshPeriod 기간 동안 허용되는 요청 수
        limitRefreshPeriod: 1 # limitRefresh 기간 (초)
        timeoutDuration: 3 # 권한 acquire(허가)를 위해 스레드가 대기하는 시간 (초)
      #      registerHealthIndicator: true # actuator를 통해 ratelimiter 상태를 체크하기 위한 여부
      create-post:
        limitForPeriod: 100
        limitRefreshPeriod: 1
        timeoutDuration: 3
      create-wish:
        limitForPeriod: 100
        limitRefreshPeriod: 1
        timeoutDuration: 3
      update-member-influencer:
        limitForPeriod: 100
        limitRefreshPeriod: 1
        timeoutDuration: 3

---
spring:
  config:
    activate:
      on-profile: develop

---
spring:
  config:
    activate:
      on-profile: production
